<?php

// $Id$

/**
 * @file
 * Code for the Job feature.
 * This module provides a simple way to execute jobs external to Drupal
 * by leveraging the power of the webform module.
 */

define('JOB_RESULT_CODE_PENDING', 0);
define('JOB_RESULT_CODE_SUCCESS', 1);
define('JOB_RESULT_CODE_FAIL',    2);
define('JOB_RESULT_CODE_ERROR_VALIDATION', 10);
define('JOB_RESULT_CODE_UNKNOWNJOBTYPE', 11);

/**
 * Implements hook_permission().
 */
function job_permission() {
  return array(
    'use job' => array(
      'title' => t('use job'),
      'description' => t('Use the Job module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function job_menu() {
  $items['job/%/submit/%'] = array(
    'title' => 'Submit Job',
    'description' => 'Submit a Job programatically with a URL.',
    'page callback' => 'job_webform_url_submit',
    'page arguments' => array(1, 3),
    'access arguments' => array('use job'), 
  );
  return $items;
}

function job_node_presave($node) {
  if (($node->type == 'job') and (!$node->nid)) { // this only applies on NEW job nodes

    // Customize the Webform to work better for Jobs
    $node->webform['confirmation'] = 'Job complete!';
    $node->webform['redirect_url'] = 'node/%nid/submission/%sid';

    // Add the Results Webform field automatically to hold Job results
    $node->webform['components'] = array();
    $node->webform['components'][1] = array(
      'form_key' => 'result_code',
      'name' => 'Result Code',
      'pid' => 0,
      'type' => 'textarea',
      'value' => '0',
      'page_num' => 1,
      'mandatory' => '0',
      'weight' => '1000',
      'extra' => array(
        'title_display' => 0,
        'rows' => '1',
        'resizable' => 0,
        'disabled' => 1,
        'conditional_operator' => '=',
        'cols' => '',
        'description' => '',
        'attributes' => array(),
        'conditional_component' => '',
        'conditional_values' => '',
      ),
    );
    $node->webform['components'][2] = array(
      'form_key' => 'result',
      'name' => 'Result',
      'pid' => 0,
      'type' => 'textarea',
      'value' => 'Ignore this field for now - Job results will be placed here.',
      'page_num' => 1,
      'mandatory' => '0',
      'weight' => '1002',
      'extra' => array(
        'title_display' => 0,
        'rows' => '1',
        'resizable' => 0,
        'disabled' => 1,
        'conditional_operator' => '=',
        'cols' => '',
        'description' => '',
        'attributes' => array(),
        'conditional_component' => '',
        'conditional_values' => '',
      ),
    );
  }
}


// function job_webform_component_insert($component) {
// }


/**
 * Implements hook_form_alter().
 */
function job_form_alter(&$form, $form_state, $form_id) {
  global $base_url;
  if (isset($form['#node']->type) and ($form['#node']->type == 'job')) {

    // custom submit handler so our custom options lists can access data from webform components on previous form pages
    // currenlty, multistep forms are used so you can pick an AWS account on one step, and the related AWS instance or volume on the next
    //$form['#submit'][] = 'job_webform_multistep_submit';

    // not used: cleanup SESSION variables used for passing state to option lists on multistep forms
    // not used: unset($_SESSION['job_aws_account']);

    if ($form_id == 'job_node_form') {
      // available weform fields
      $available_webform_fields = array();
      $found_result_field=0;
      if (isset($form['webform'])) {
        foreach ($form['webform']['#value']['components'] as $component) {
          // hide the "result" and "result_code" fields which aren't meaningful for now
          if (($component['form_key']=='result') or ($component['form_key']=='result_code')) {
            continue;
          }
          if ($component['type']=='pagebreak') {
            continue;
          }
          // Add custom token-like strings for command substitution - XXX this probably should use token module!
          // provide plain vanilla substitution for all other Webform fields
          $available_webform_fields[] = '%' . $component['form_key'];
        }
        // provide substitution for saving a field to a temp file if the appropriate node field exists
        if (isset($form['job_script'])) {
          $available_webform_fields[] = '%' . 'script_filename';
        }
        $form['job_command']['und'][0]['value']['#description'] = t('The following Job fields are available for substitution: %fields', array('%fields' => join(', ', $available_webform_fields)));
      }
      else {
        drupal_set_message(t('Webform must be enabled for the Job module to work properly'), 'error');
      }

    } else if (preg_match('/^webform_client_form_\d+$/', $form_id)) {

      $form['job_submit_link'] = array(
        '#type' => 'markup',
        '#markup' => '<div id="job-submit-link-container" style="float:right">' . l(t('Link to submit with defaults'), 'job/'.$form['#node']->nid.'/submit/'.job_fetch_global_token(), array('attributes' => array('id' => 'job-submit-link'))) . '</div><script>jQuery("#job-submit-link").click(function() { jQuery("#job-submit-link-container").html("<input id=\"job-submit-link-input\" size=60 type=text value=\"'.$base_url.'/job/'.$form['#node']->nid.'/submit/'.job_fetch_global_token().'\">"); jQuery("#job-submit-link-input").select(); return false;} );</script>',
      );
      // add CSS to hide the result & result_code webform components when displaying the node webform
      drupal_add_css(drupal_get_path('module', 'job') . '/job.css');
    }
  }
}

function job_webform_multistep_submit($form, &$form_state) {
  // this is where we would hand data between multistep forms
}

function job_webform_submission_presave($node, &$submission) {
  // this is where the action happens - the job is executed and the results are saved in the webform
  $job_result_code= JOB_RESULT_CODE_PENDING;
  $job_result = '';
  $job_cmd = '';
  $mapping = _job_webform_component_mapping($node);
  $job_type = $node->job_type['und'][0]['value'];
  $job_cmd = trim($node->job_command['und'][0]['value']);

  // validate regex matches our expectations
  if (( isset($node->job_success_regex['und'][0]['value']) ) and ( !preg_match('/^\/.*\/$/', $node->job_success_regex['und'][0]['value']) )) {
    $job_result .= t('Error validating job: REGEX must start end end with a slash: /');
    $job_result_code= JOB_RESULT_CODE_ERROR_VALIDATION;
  }

  // TODO: add more "job validation" here - need to determine what that would be

  else {
    // TODO: someday, add job scheduling instead of running jobs inline: $job_result .= t('Scheduled for execution');

    $files_to_cleanup = array(); // keep track of temp files and dirs so we can delete them when the job is done
    $dirs_to_cleanup = array();
    foreach (array_keys($mapping) as $fieldname) {
      if (isset($submission->data[$mapping[$fieldname]]['value'][0])) {
        $argdata = $submission->data[$mapping[$fieldname]]['value'][0];

        // this is where we do "token" substitution for Webform fields (except it's not Token)
        $job_cmd = preg_replace('/%' . $fieldname . '/', $argdata, $job_cmd);
      }
    }
    // create temporary file with script contained in node field
    if ((isset($node->job_script['und'])) and (drupal_strlen($node->job_script['und'][0]['value'])>0)) {
      $tmpdname = tempnam(sys_get_temp_dir(), 'drupal_job_scripttmp');
      unlink($tmpdname);
      mkdir($tmpdname, 0700);
      $dirs_to_cleanup[] = $tmpdname;
      $script_filename = $tmpdname . '/drupal_job_script';
      $script_code = $node->job_script['und'][0]['value'];
      $tmpdname = tempnam(sys_get_temp_dir(), 'drupal_job_scripttmp');
      file_put_contents($script_filename, $script_code);
      $files_to_cleanup[] = $script_filename;
      chmod($script_filename, 0700);

      $job_cmd = preg_replace('/%script_filename/', $script_filename, $job_cmd);
    }

    // execute the job now
    if (strcmp($job_type, 'shell')==0) {
      $job_output = shell_exec($job_cmd . ' 2>&1');
      // XXX huge TODO - check for success/fail here - do this by checking job output against regex defined in optional node field -- $job_result_code= JOB_RESULT_CODE_FAIL
      if ( isset($node->job_success_regex['und'][0]['value']) ) {

        // run the regex against the Job output
        if (preg_match( $node->job_success_regex['und'][0]['value'].'msU', $job_output) ) {
          $job_result .= t('Successful Shell Job') . ': ';
          $job_result .= check_plain( $job_output); // TODO: do we want to actually render the HTML?
          $job_result_code= JOB_RESULT_CODE_SUCCESS;
        } else {
          $job_result .= t('Unsuccessful Shell Job') . ': ';
          $job_result .= check_plain( $job_output);
          $job_result_code= JOB_RESULT_CODE_FAIL;
        }
      }
      else {
        $job_result .= t('Successful Shell Job') . ': ';
        $job_result .= check_plain( $job_output);
        $job_result_code= JOB_RESULT_CODE_SUCCESS;
      }
    }
  /* TODO: This code will allow for PHP-based execution, but this is not fully tested yet
    elseif (strcmp($job_type, 'php')==0) {
      unset($job_output);
      eval($job_cmd);
      if (isset($job_output)) {
        $job_result .= t('Successful PHP job: %job_output', array('%job_output' => $job_output));
      }
      else {
        $job_output = FALSE;
        $job_result .= t('Error executing PHP job: $job_output not set');
      }
    }
   */
    else {
      $job_result .= t('Error running job: unknown job type');
      $job_result_code= JOB_RESULT_CODE_UNKNOWNJOBTYPE;
    }

    // cleanup
    foreach ($files_to_cleanup as $clean_me_up) {
      unlink($clean_me_up);
    }
    foreach ($dirs_to_cleanup as $clean_me_up) {
      rmdir($clean_me_up);
    }
  }

  // result
  $job_result .= "\n\n" . t('Job Command') . ': ' . check_plain($job_cmd);
  if ( isset($node->job_success_regex['und'][0]['value']) ) {
    $job_result .= "\n\n" . t('Job Success REGEX') . ': ' . check_plain($node->job_success_regex['und'][0]['value']);
  }
  $submission->data[$mapping['result']] = array( 'value' => array( 0 => $job_result));
  $submission->data[$mapping['result_code']] = array( 'value' => array( 0 => $job_result_code));
  watchdog('job', $job_result); // TODO: clean this up - don't duplicate so much info in the watchdog log?
}

function _job_webform_component_mapping($node) {
  $mapping = array();
  $components = $node->webform['components'];
  foreach ($components as $i => $component) {
    $key = $component['form_key'];
    $mapping[$key] = $i;
  }
  return $mapping;
}

function job_webform_url_submit($nid, $token=0) {
  $validtoken = job_fetch_global_token();
  if ($token != $validtoken)  {
    drupal_json_output(array(
      'success' => FALSE,
      'message' => 'Bad token'
    ));
    dd('invalid token XXX');
    return;
  }
  job_webform_submit($nid);
}

/**
 *  For submitting webforms programatically
 *  Calls the webform submit handler for saving the form values and sending e-mails
 */
function job_webform_submit($nid, $token=0) {
  $node = node_load($nid);
  if (!isset($node->webform)) {
    drupal_json_output(array(
      'success' => FALSE,
      'message' => 'no webform at this node XXX'
    ));
    return;
  }

  $form = NULL;
  $form = webform_client_form($form, NULL, $node, NULL);

  $form_state = array();
  $form_state['webform_completed'] = TRUE;
  $form_state['values']['details']['finished'] = TRUE;
  $form_state['values']['details']['sid'] = NULL;
  $form_state['values']['details']['uid'] = 0;
  
  // load the webform's components and set submitted values to defaults
  foreach($node->webform['components'] as $cid => $component) {
    $form_state['values']['submitted'][$cid] = $component['value'];
  }

  // XXX validate defaults will succeed with: webform_client_form_validate

  // submit the webform
  webform_client_form_submit($form, $form_state);

  drupal_json_output(array('success' => TRUE));
}

function job_generate_global_token() {
    $token_length=16;
    $chars = "abcdefghijkmnopqrstuvwxyz023456789ABCDEFGHIJKMNOPQRSTUVWXYZ";
    $chars_length = strlen($chars);
    srand((double)microtime()*1000000);
    $i = 0;
    $tok = '' ;
    while ($i < $token_length) {
        $num = rand() % $chars_length;
        $tmp = substr($chars, $num, 1);
        $tok = $tok . $tmp;
        $i++;
    }   
    return $tok;
}
function job_fetch_global_token() {
  $token = variable_get('job_global_token');
  if (!$token) {
    $token = job_generate_global_token();
    variable_set('job_global_token', $token);
  }
  return $token;
}

